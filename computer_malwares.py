import sys
import random
import json
from datetime import datetime
from PyQt5.QtWidgets import (QApplication, QMainWindow, QPushButton, QVBoxLayout, QHBoxLayout, QWidget, QLabel, QGroupBox, QMessageBox)
from PyQt5.QtGui import QFont
from PyQt5.QtCore import Qt, QProcess, QTimer
from PyQt5.QtMultimedia import QSound

# ...
questions_computer_malwares = {
    "1": {
        "question": "What type of malware is designed to replicate itself and spread to other computers?",
        "options": {
            "A": "Trojan",
            "B": "Virus",
            "C": "Adware",
            "D": "Spyware",
        },
        "answer": "B",
    },
    "2": {
        "question": "What is a 'Trojan Horse' in the context of computer security?",
        "options": {
            "A": "A type of antivirus software",
            "B": "A secure operating system",
            "C": "A malware that disguises itself as legitimate software",
            "D": "A firewall feature",
        },
        "answer": "C",
    },
    "3": {
        "question": "Which type of malware displays unwanted advertisements to the user?",
        "options": {
            "A": "Adware",
            "B": "Spyware",
            "C": "Virus",
            "D": "Ransomware",
        },
        "answer": "A",
    },
    "4": {
        "question": "What type of malware is specifically designed to steal personal information?",
        "options": {
            "A": "Adware",
            "B": "Ransomware",
            "C": "Spyware",
            "D": "Worm",
        },
        "answer": "C",
    },
    "5": {
        "question": "Which type of malware is known for encrypting the victim's data and demanding a ransom for the decryption key?",
        "options": {
            "A": "Trojan",
            "B": "Virus",
            "C": "Ransomware",
            "D": "Worm",
        },
        "answer": "C",
    },
    "6": {
        "question": "What is a 'worm' in computer security?",
        "options": {
            "A": "A tool for network security",
            "B": "A type of malware that spreads copies of itself from computer to computer",
            "C": "A type of physical hardware defect",
            "D": "A secure type of computer cable",
        },
        "answer": "B",
    },
    "7": {
        "question": "Which malware is best known for its role in large-scale cyber attacks and its ability to self-propagate across networks?",
        "options": {
            "A": "Spyware",
            "B": "Adware",
            "C": "Ransomware",
            "D": "Worm",
        },
        "answer": "D",
    },
    "8": {
        "question": "What is the main purpose of 'rootkits' in cybersecurity?",
        "options": {
            "A": "To secure the computer against viruses",
            "B": "To encrypt data securely",
            "C": "To allow hackers to remotely control or access a computer without detection",
            "D": "To monitor network traffic",
        },
        "answer": "C",
    },
    "9": {
        "question": "Which type of malware is often disguised as legitimate software but carries a malicious payload?",
        "options": {
            "A": "Trojan",
            "B": "Virus",
            "C": "Adware",
            "D": "Ransomware",
        },
        "answer": "A",
    },
    "10": {
        "question": "What type of malware typically spreads by attaching itself to executable files?",
        "options": {
            "A": "Spyware",
            "B": "Virus",
            "C": "Worm",
            "D": "Ransomware",
        },
        "answer": "B",
    },
    "11": {
        "question": "Which type of malware can capture and send keystrokes to an attacker?",
        "options": {
            "A": "Keylogger",
            "B": "Spyware",
            "C": "Virus",
            "D": "Adware",
        },
        "answer": "A",
    },
    "12": {
        "question": "What malware type is designed to multiply and spread without human interaction?",
        "options": {
            "A": "Trojan",
            "B": "Virus",
            "C": "Worm",
            "D": "Ransomware",
        },
        "answer": "C",
    },
    "13": {
        "question": "Which type of malware covertly collects user information through the user's Internet connection?",
        "options": {
            "A": "Adware",
            "B": "Spyware",
            "C": "Virus",
            "D": "Worm",
        },
        "answer": "B",
    },
    "14": {
        "question": "What action should you take if your computer is infected with malware?",
        "options": {
            "A": "Continue using the computer normally",
            "B": "Disconnect from the internet and run antivirus software",
            "C": "Delete suspicious files manually",
            "D": "Sell the computer",
        },
        "answer": "B",
    },
    "15": {
        "question": "What type of malware modifies the way a computer operates and hides its presence from users and antivirus programs?",
        "options": {
            "A": "Rootkit",
            "B": "Spyware",
            "C": "Adware",
            "D": "Trojan",
        },
        "answer": "A",
    },
    "16": {
        "question": "Which malware technique involves making a file or network resource unavailable to its intended users?",
        "options": {
            "A": "DoS attack",
            "B": "Phishing",
            "C": "Spying",
            "D": "Spoofing",
        },
        "answer": "A",
    },
    "17": {
        "question": "Which type of attack is characterized by malicious software that locks or encrypts data, demanding a ransom to restore access?",
        "options": {
            "A": "Phishing attack",
            "B": "Ransomware attack",
            "C": "Spyware attack",
            "D": "Adware attack",
        },
        "answer": "B",
    },
    "18": {
        "question": "What is a common method by which viruses spread to other computers?",
        "options": {
            "A": "Through email attachments",
            "B": "By physically moving the computer",
            "C": "Through unsecured Wi-Fi networks",
            "D": "Via secure websites",
        },
        "answer": "A",
    },
    "19": {
        "question": "Which of these is NOT a characteristic of a 'botnet'?",
        "options": {
            "A": "Network of infected computers",
            "B": "Used to send spam emails",
            "C": "Operates independently of a network",
            "D": "Can perform distributed denial-of-service attacks",
        },
        "answer": "C",
    },
    "20": {
        "question": "What type of malware often requires the victim to perform a specific action, like clicking a link, to activate?",
        "options": {
            "A": "Virus",
            "B": "Trojan",
            "C": "Worm",
            "D": "Ransomware",
        },
        "answer": "B",
    },
    "21": {
        "question": "What is a distinctive feature of a 'ransomware' attack?",
        "options": {
            "A": "It spreads without user interaction",
            "B": "It encrypts files demanding a ransom",
            "C": "It steals personal information",
            "D": "It displays unwanted advertisements",
        },
        "answer": "B",
    },
    "22": {
        "question": "What type of malware secretly records your actions on a computer?",
        "options": {
            "A": "Spyware",
            "B": "Virus",
            "C": "Adware",
            "D": "Trojan",
        },
        "answer": "A",
    },
    "23": {
        "question": "Which malware is specifically designed to avoid detection by antivirus software?",
        "options": {
            "A": "Adware",
            "B": "Rootkit",
            "C": "Worm",
            "D": "Spyware",
        },
        "answer": "B",
    },
    "24": {
        "question": "What is the purpose of 'adware' in the context of computer malware?",
        "options": {
            "A": "To secure computer data",
            "B": "To display targeted advertisements",
            "C": "To monitor user behavior without consent",
            "D": "To encrypt user data for ransom",
        },
        "answer": "B",
    },
    "25": {
        "question": "Which type of malware is designed to replicate itself and spread via network vulnerabilities?",
        "options": {
            "A": "Trojan",
            "B": "Virus",
            "C": "Worm",
            "D": "Ransomware",
        },
        "answer": "C",
    },
    "26": {
        "question": "What is the main function of a keylogger?",
        "options": {
            "A": "To log user keystrokes",
            "B": "To provide data encryption",
            "C": "To prevent malware infections",
            "D": "To filter network traffic",
        },
        "answer": "A",
    },
    "27": {
        "question": "Which type of malware attempts to damage or disrupt a computer system?",
        "options": {
            "A": "Spyware",
            "B": "Adware",
            "C": "Virus",
            "D": "VPN malware",
        },
        "answer": "C",
    },
    "28": {
        "question": "What type of malware can function as a tool for industrial espionage?",
        "options": {
            "A": "Adware",
            "B": "Ransomware",
            "C": "Spyware",
            "D": "Rootkit",
        },
        "answer": "C",
    },
    "29": {
        "question": "Which type of malware is used to perform actions without the user's knowledge, such as deleting data or crashing systems?",
        "options": {
            "A": "Trojan",
            "B": "Virus",
            "C": "Worm",
            "D": "Ransomware",
        },
        "answer": "B",
    },
    "30": {
        "question": "Which type of malware manipulates users by mimicking legitimate software?",
        "options": {
            "A": "Spyware",
            "B": "Trojan",
            "C": "Virus",
            "D": "Adware",
        },
        "answer": "B",
    },
}

class QuizWindow(QMainWindow):
    def __init__(self, questions):
        super().__init__()
        self.questions = random.sample(list(questions.values()), 10)  # Select 10 random questions
        self.current_question_index = 0
        self.score = 0

        self.timer = QTimer(self)  # Initialize the timer right after the basic setup
        self.timer.setInterval(1000)  # Set timer to tick every 1000 milliseconds (1 second)
        self.timer.timeout.connect(self.update_timer)  # Connect timer signal to slot for updating UI

        self.initUI()  # Initialize the UI components

    def initUI(self):
        self.setWindowTitle('ByteQuest - Test Your Knowledge')
        self.setGeometry(100, 100, 800, 600)
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.layout = QVBoxLayout()
        self.central_widget.setStyleSheet("QWidget {background-color: #002F40;}")

        # Timer label
        self.timer_label = QLabel("30")
        self.timer_label.setFont(QFont('Press Start 2P', 16))
        self.timer_label.setAlignment(Qt.AlignLeft)
        self.timer_label.setStyleSheet("color: red; margin-right: 20px;")
        self.layout.addWidget(self.timer_label)

        # Setup other UI components such as buttons, labels, etc.
        # Buttons with depth styling
        button_style = """
            QPushButton {
                background-color: #FFD500;
                color: black;
                border-style: outset;
                border-width: 3px;
                border-radius: 10px;
                border-color: black;
                font: bold 14px;
                min-width: 10em;
                text-align:center;
                padding:10px;
            }
            QPushButton:hover {
                background-color: white;
                color:black;
                border-style: inset;
            }
            QPushButton:pressed {
                background-color: #F7424B;
                color:white;
                border-style: inset;
            }
        """
        
        # Sound effects
        self.click_sound = QSound("Assets/Sounds/gta-click.wav")
        self.hover_sound = QSound("Assets/Sounds/gta-hover.wav")
        # Top layout for score and question counter



        self.top_layout = QHBoxLayout()
        self.question_counter_label = QLabel("Question 1/10")
        self.question_counter_label.setFont(QFont('Press Start 2P', 14))
        self.question_counter_label.setAlignment(Qt.AlignCenter)
        self.question_counter_label.setStyleSheet("""
                                                  color: white; margin-right: 20px;
                                                  """)
        self.top_layout.addWidget(self.question_counter_label, 1)

        self.score_label = QLabel("Score: 0")
        self.score_label.setFont(QFont('Press Start 2P', 10))
        self.score_label.setAlignment(Qt.AlignRight)
        self.score_label.setStyleSheet("background-color: #00000000; color:white;padding:0;")
        self.top_layout.addWidget(self.score_label)

        self.layout.addLayout(self.top_layout)

        self.options_group = QGroupBox()
        self.options_layout = QVBoxLayout()
        self.options_group.setLayout(self.options_layout)
        self.options_group.setStyleSheet("background-color:transparent;border:none;")



        # Question Text
        self.question_text = QLabel("Question will appear here")
        self.question_text.setFont(QFont('Press Start 2P', 10, QFont.Bold))
        self.question_text.setAlignment(Qt.AlignCenter)
        self.layout.addWidget(self.question_text, 1)
        self.question_text.setStyleSheet("color: white; padding: 10px; background-color: transparent;")

        self.options_group = QGroupBox()
        self.options_layout = QVBoxLayout()
        self.options_group.setLayout(self.options_layout)
        self.options_group.setStyleSheet("background-color: transparent; border: none;")

        self.option_buttons = []
        for i in range(4):
            button = QPushButton("Option {}".format(chr(65 + i)))
            button.setFont(QFont('Press Start 2P', 16))
            self.option_buttons.append(button)
            self.options_layout.addWidget(button)
            self.option_buttons[i].setStyleSheet(button_style)
            self.option_buttons[i].clicked.connect(self.click_sound.play)  # Connect click sound
            self.option_buttons[i].enterEvent = lambda event, b=self.option_buttons[i]: self.play_hover_sound(event, b)
            button.clicked.connect(self.check_answer)

        self.layout.addWidget(self.options_group)
        self.central_widget.setLayout(self.layout)
        self.display_question()
       
        

    def play_hover_sound(self, event, button):
        self.hover_sound.play()
        return super(QPushButton, button).enterEvent(event)
    def backtolevelspage(self):
        process = QProcess(self)
        process.start("python", ["level_form.py"])  # Placeholder for actual function
        self.hide()

    def update_timer(self):
        current_time = int(self.timer_label.text())
        if current_time > 0:
            self.timer_label.setText(str(current_time - 1))
        else:
            QMessageBox.information(self, 'Time Out', QMessageBox.Ok)
            self.next_question()

    def display_question(self):
        question = self.questions[self.current_question_index]
        self.question_text.setText(question['question'])
        self.question_counter_label.setText(f"Question {self.current_question_index+1}/{len(self.questions)}")
        for i, (key, option) in enumerate(question['options'].items()):
            self.option_buttons[i].setText(f"{key}. {option}")
            self.timer.start()
            self.timer_label.setText("30")  # Reset timer for new question

    def next_question(self):
        self.current_question_index += 1
        if self.current_question_index < len(self.questions):
            self.display_question()
        else:
            self.end_quiz()

    def check_answer(self):
        self.timer.stop()  # Stop the timer when a response is given
        clicked_button = self.sender()
        correct_answer = self.questions[self.current_question_index]['answer']
        selected_option = clicked_button.text().split('.')[0]

        if selected_option == correct_answer:
            self.score += 1
            self.score_label.setText(f"Score: {self.score}")
            QMessageBox.information(self, 'Correct!', 'You got it right!', QMessageBox.Ok)
        else:
            QMessageBox.information(self, 'Incorrect!', 'Oops, that was not correct.', QMessageBox.Ok)

        self.current_question_index += 1
        if self.current_question_index < len(self.questions):
            self.display_question()
        else:
            QMessageBox.information(self, 'Quiz Finished', f'Your final score is {self.score}/{len(self.questions)}', QMessageBox.Ok)
            self.save_score()
            process = QProcess(self)
            process.start("python", ["main_menu.py"])
            self.hide()

    def end_quiz(self):
        QMessageBox.information(self, 'Quiz Finished', f'Your final score is {self.score}/{len(self.questions)}', QMessageBox.Ok)
        self.timer.stop()
        # Add functionality to save scores or return to a main menu as needed.

    # Additional methods such as saving scores or resetting the quiz can be added here.
    def save_score(self):
        score_record = {
            "score": self.score,
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "level":"Computer Malware"
        }
        try:
            with open('scores.json', 'r') as file:
                data = json.load(file)
        except FileNotFoundError:
            data = []
        
        data.append(score_record)
        with open('scores.json', 'w') as file:
            json.dump(data, file, indent=4)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = QuizWindow(questions_computer_malwares)  # Pass the dictionary of questions here
    window.show()
    sys.exit(app.exec_())
